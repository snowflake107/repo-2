concurrency:
  cancel-in-progress: true
  group: "${{ github.workflow }}\n${{ github.event_name }}\n${{\n  (github.event_name\
    \ == 'schedule' && github.sha) ||\n  (github.event_name == 'issue_comment' &&\
    \ (\n    github.event.comment.body == '/ci-multicluster' ||\n    github.event.comment.body\
    \ == '/test'\n  ) && github.event.issue.number) ||\n  (github.event_name == 'pull_request'\
    \ && github.event.pull_request.number)\n}}\n"
env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
  check_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id
    }}
  cilium_cli_version: v0.11.11
  clusterName1: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{
    github.run_id }}-mesh-1
  clusterName2: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{
    github.run_id }}-mesh-2
  firewallRuleName: ${{ github.repository_owner }}-${{ github.event.repository.name
    }}-${{ github.run_id }}-rule
  zone: us-west2-a
jobs:
  check_changes:
    name: Deduce required tests from code changes
    outputs:
      tested: ${{ steps.tested-tree.outputs.src }}
    runs-on: ubuntu-latest
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      if: ${{ github.event.issue.pull_request }}
      name: Checkout code
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      with:
        persist-credentials: false
    - continue-on-error: true
      id: pr
      if: ${{ github.event.issue.pull_request }}
      name: Retrieve pull request's base and head
      run: 'curl ${{ github.event.issue.pull_request.url }} > pr.json

        echo "::set-output name=base::$(jq -r ''.base.sha'' pr.json)"

        echo "::set-output name=head::$(jq -r ''.head.sha'' pr.json)"

        '
    - continue-on-error: true
      id: tested-tree
      if: ${{ github.event.issue.pull_request }}
      name: Check code changes
      uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721
      with:
        base: ${{ steps.pr.outputs.base }}
        filters: "src:\n  - '!(test|Documentation)/**'\n"
        ref: ${{ steps.pr.outputs.head }}
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid/appian/cilium.$(date
        +%s)
    timeout-minutes: 60
  installation-and-connectivity:
    needs: check_changes
    runs-on: ubuntu-latest
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      id: vars
      name: Set up job variables
      run: "if [ ${{ github.event.issue.pull_request || github.event.pull_request\
        \ }} ]; then\n  PR_API_JSON=$(curl \\\n    -H \"Accept: application/vnd.github.v3+json\"\
        \ \\\n    -H \"Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}\" \\\n  \
        \  ${{ github.event.issue.pull_request.url || github.event.pull_request.url\
        \ }})\n  SHA=$(echo \"$PR_API_JSON\" | jq -r \".head.sha\")\n  OWNER=$(echo\
        \ \"$PR_API_JSON\" | jq -r \".number\")\nelse\n  SHA=${{ github.sha }}\n \
        \ OWNER=${{ github.sha }}\nfi\n\nCILIUM_INSTALL_DEFAULTS=\"--chart-directory=install/kubernetes/cilium\
        \ \\\n  --helm-set=image.repository=quay.io/${{ github.repository_owner }}/cilium-ci\
        \ \\\n  --helm-set=image.useDigest=false \\\n  --helm-set=image.tag=${SHA}\
        \ \\\n  --helm-set=operator.image.repository=quay.io/${{ github.repository_owner\
        \ }}/operator \\\n  --helm-set=operator.image.suffix=-ci \\\n  --helm-set=operator.image.tag=${SHA}\
        \ \\\n  --helm-set=operator.image.useDigest=false \\\n  --helm-set=clustermesh.apiserver.image.repository=quay.io/${{\
        \ github.repository_owner }}/clustermesh-apiserver-ci \\\n  --helm-set=clustermesh.apiserver.image.tag=${SHA}\
        \ \\\n  --helm-set=clustermesh.apiserver.image.useDigest=false \\\n  --helm-set=hubble.relay.image.repository=quay.io/${{\
        \ github.repository_owner }}/hubble-relay-ci \\\n  --helm-set=hubble.relay.image.tag=${SHA}\
        \ \\\n  --wait=false \\\n  --rollback=false \\\n  --config monitor-aggregation=none\
        \ \\\n  --version=\"\nHUBBLE_ENABLE_DEFAULTS=\"--chart-directory=install/kubernetes/cilium\
        \ \\\n  --relay-image=quay.io/${{ github.repository_owner }}/hubble-relay-ci:${SHA}\
        \ \\\n  --relay-version=${SHA}\"\nCONNECTIVITY_TEST_DEFAULTS=\"--flow-validation=disabled\"\
        \nCLUSTERMESH_ENABLE_DEFAULTS=\"--apiserver-image=quay.io/${{ github.repository_owner\
        \ }}/clustermesh-apiserver-ci \\\n  --apiserver-version=${SHA}\"\necho ::set-output\
        \ name=cilium_install_defaults::${CILIUM_INSTALL_DEFAULTS}\necho ::set-output\
        \ name=hubble_enable_defaults::${HUBBLE_ENABLE_DEFAULTS}\necho ::set-output\
        \ name=connectivity_test_defaults::${CONNECTIVITY_TEST_DEFAULTS}\necho ::set-output\
        \ name=clustermesh_enable_defaults::${CLUSTERMESH_ENABLE_DEFAULTS}\necho ::set-output\
        \ name=sha::${SHA}\necho ::set-output name=owner::${OWNER}\n"
    - continue-on-error: true
      name: Set commit status to pending
      uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: ${{ github.workflow }}
        description: Connectivity test in progress...
        sha: ${{ steps.vars.outputs.sha }}
        state: pending
        target_url: ${{ env.check_url }}
    - continue-on-error: true
      name: Install Cilium CLI
      run: 'curl -sSL --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${{
        env.cilium_cli_version }}/cilium-linux-amd64.tar.gz{,.sha256sum}

        sha256sum --check cilium-linux-amd64.tar.gz.sha256sum

        sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin

        rm cilium-linux-amd64.tar.gz{,.sha256sum}

        cilium version

        '
    - continue-on-error: true
      name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@877d4953d2c70a0ba7ef3290ae968eb24af233bb
      with:
        export_default_credentials: true
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_PR_SA_KEY }}
    - continue-on-error: true
      name: Display gcloud CLI info
      run: 'gcloud info

        '
    - continue-on-error: true
      name: Create GKE cluster 1
      run: "gcloud container clusters create ${{ env.clusterName1 }} \\\n  --labels\
        \ \"usage=${{ github.repository_owner }}-${{ github.event.repository.name\
        \ }},owner=${{ steps.vars.outputs.owner }}\" \\\n  --zone ${{ env.zone }}\
        \ \\\n  --enable-ip-alias \\\n  --create-subnetwork=\"\" \\\n  --image-type\
        \ COS_CONTAINERD \\\n  --num-nodes 2 \\\n  --machine-type e2-custom-2-4096\
        \ \\\n  --disk-type pd-standard \\\n  --disk-size 10GB \\\n  --node-taints\
        \ node.cilium.io/agent-not-ready=true:NoExecute \\\n  --preemptible\n"
    - continue-on-error: true
      name: Create GKE cluster 2
      run: "gcloud container clusters create ${{ env.clusterName2 }} \\\n  --labels\
        \ \"usage=${{ github.repository_owner }}-${{ github.event.repository.name\
        \ }},owner=${{ steps.vars.outputs.owner }}\" \\\n  --zone ${{ env.zone }}\
        \ \\\n  --enable-ip-alias \\\n  --create-subnetwork=\"\" \\\n  --image-type\
        \ COS_CONTAINERD \\\n  --num-nodes 2 \\\n  --machine-type e2-custom-2-4096\
        \ \\\n  --disk-type pd-standard \\\n  --disk-size 10GB \\\n  --node-taints\
        \ node.cilium.io/agent-not-ready=true:NoExecute \\\n  --preemptible\n"
    - continue-on-error: true
      name: Allow cross-cluster traffic
      run: 'TAG1=$(gcloud compute firewall-rules list --filter="name~^gke-${{ env.clusterName1
        }}-[0-9a-z]*-all$" --format="value(name)")

        TAG2=$(gcloud compute firewall-rules list --filter="name~^gke-${{ env.clusterName2
        }}-[0-9a-z]*-all$" --format="value(name)")

        gcloud compute firewall-rules describe $TAG1

        gcloud compute firewall-rules describe $TAG2

        gcloud compute firewall-rules create ${{ env.firewallRuleName }} --allow tcp,udp,icmp,sctp,esp,ah
        --priority=999 --source-ranges=10.0.0.0/9 --target-tags=${TAG1/-all/-node},${TAG2/-all/-node}

        gcloud compute firewall-rules describe ${{ env.firewallRuleName }}

        '
    - continue-on-error: true
      id: contexts
      name: Get cluster credentials and setup contexts
      run: 'gcloud container clusters get-credentials ${{ env.clusterName1 }} --zone
        ${{ env.zone }}

        CONTEXT_1="$(kubectl config view | grep ${{ env.clusterName1 }} | head -1
        | awk ''{print $2}'')"

        echo ::set-output name=context1::${CONTEXT_1}

        gcloud container clusters get-credentials ${{ env.clusterName2 }} --zone ${{
        env.zone }}

        CONTEXT_2="$(kubectl config view | grep ${{ env.clusterName2 }} | head -1
        | awk ''{print $2}'')"

        echo ::set-output name=context2::${CONTEXT_2}

        '
    - continue-on-error: true
      name: Wait for images to be available
      run: "for image in cilium-ci operator-generic-ci hubble-relay-ci clustermesh-apiserver-ci\
        \ ; do\n  until docker manifest inspect quay.io/${{ github.repository_owner\
        \ }}/$image:${{ steps.vars.outputs.sha }} &> /dev/null; do sleep 45s; done\n\
        done\n"
      shell: bash
      timeout-minutes: 10
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b
      with:
        persist-credentials: false
        ref: ${{ steps.vars.outputs.sha }}
    - continue-on-error: true
      name: Install Cilium in cluster1
      run: "cilium install ${{ steps.vars.outputs.cilium_install_defaults }} \\\n\
        \  --context ${{ steps.contexts.outputs.context1 }} \\\n  --cluster-name=${{\
        \ env.clusterName1 }} \\\n  --cluster-id 1 \\\n  --ipv4-native-routing-cidr=10.0.0.0/9\n"
    - continue-on-error: true
      name: Install Cilium in cluster2
      run: "cilium install ${{ steps.vars.outputs.cilium_install_defaults }} \\\n\
        \  --context ${{ steps.contexts.outputs.context2 }} \\\n  --cluster-name=${{\
        \ env.clusterName2 }} \\\n  --cluster-id 2 \\\n  --ipv4-native-routing-cidr=10.0.0.0/9\
        \ \\\n  --inherit-ca ${{ steps.contexts.outputs.context1 }}\n"
    - continue-on-error: true
      name: Enable Relay
      run: 'cilium hubble enable --context ${{ steps.contexts.outputs.context1 }}
        ${{ steps.vars.outputs.hubble_enable_defaults }} --wait=false

        cilium hubble enable --context ${{ steps.contexts.outputs.context2 }} ${{
        steps.vars.outputs.hubble_enable_defaults }} --relay=false

        cilium status --wait --context ${{ steps.contexts.outputs.context1 }}

        '
    - continue-on-error: true
      name: Enable cluster mesh
      run: 'cilium clustermesh enable --context ${{ steps.contexts.outputs.context1
        }} ${{ steps.vars.outputs.clustermesh_enable_defaults }}

        cilium clustermesh enable --context ${{ steps.contexts.outputs.context2 }}
        ${{ steps.vars.outputs.clustermesh_enable_defaults }}

        '
    - continue-on-error: true
      name: Wait for cluster mesh status to be ready
      run: 'cilium clustermesh status --wait --context ${{ steps.contexts.outputs.context1
        }}

        cilium clustermesh status --wait --context ${{ steps.contexts.outputs.context2
        }}

        '
    - continue-on-error: true
      name: Connect clusters
      run: "cilium clustermesh connect \\\n  --context ${{ steps.contexts.outputs.context1\
        \ }} \\\n  --destination-context ${{ steps.contexts.outputs.context2 }}\n"
    - continue-on-error: true
      name: Wait for cluster mesh status to be ready
      run: 'cilium clustermesh status --wait --context ${{ steps.contexts.outputs.context1
        }}

        cilium clustermesh status --wait --context ${{ steps.contexts.outputs.context2
        }}

        '
    - continue-on-error: true
      name: Port forward Relay
      run: 'cilium hubble port-forward --context ${{ steps.contexts.outputs.context1
        }}&

        sleep 10s

        [[ $(pgrep -f "cilium.*hubble.*port-forward|kubectl.*port-forward.*hubble-relay"
        | wc -l) == 2 ]]

        '
    - continue-on-error: true
      name: Run connectivity test
      run: "cilium connectivity test ${{ steps.vars.outputs.connectivity_test_defaults\
        \ }} \\\n  --context ${{ steps.contexts.outputs.context1 }} \\\n  --multi-cluster\
        \ ${{ steps.contexts.outputs.context2 }} \\\n  --test '!/pod-to-.*-nodeport'\
        \ \\\n  --test '!no-policies/pod-to-service'\n"
    - continue-on-error: true
      if: ${{ false }}
      name: Enable WireGuard
      run: "for ctx in ${{ steps.contexts.outputs.context1 }} ${{ steps.contexts.outputs.context2\
        \ }} ; do\n  kubectl config use-context \"$ctx\"\n  cilium config set --restart=false\
        \ enable-wireguard true\n  cilium config set --restart=false enable-wireguard-userspace-fallback\
        \ true\n  cilium config set --restart=true  enable-l7-proxy  false\n  cilium\
        \ status --wait\ndone\n"
    - continue-on-error: true
      if: ${{ false }}
      name: Run connectivity test with WireGuard
      run: "cilium connectivity test ${{ steps.vars.outputs.connectivity_test_defaults\
        \ }} \\\n  --context ${{ steps.contexts.outputs.context1 }} \\\n  --multi-cluster\
        \ ${{ steps.contexts.outputs.context2 }} \\\n  --test '!/pod-to-.*-nodeport'\
        \ \\\n  --test '!client-egress-l7,!echo-ingress-l7,!to-fqdns,!dns-only' \\\
        \n  --test '!no-policies/pod-to-service'\n"
    - continue-on-error: true
      if: ${{ !success() }}
      name: Post-test information gathering
      run: 'kubectl get pods --all-namespaces -o wide

        cilium status --context ${{ steps.contexts.outputs.context1 }}

        cilium clustermesh status --context ${{ steps.contexts.outputs.context1 }}

        cilium status --context ${{ steps.contexts.outputs.context2 }}

        cilium clustermesh status --context ${{ steps.contexts.outputs.context2 }}


        kubectl config use-context ${{ steps.contexts.outputs.context1 }}

        kubectl get pods --all-namespaces -o wide

        cilium sysdump --output-filename cilium-sysdump-context1


        kubectl config use-context ${{ steps.contexts.outputs.context2 }}

        kubectl get pods --all-namespaces -o wide

        cilium sysdump --output-filename cilium-sysdump-context2

        '
      shell: bash {0}
    - continue-on-error: true
      if: ${{ always() }}
      name: Clean up GKE
      run: 'gcloud compute firewall-rules delete ${{ env.firewallRuleName }} --quiet

        gcloud container clusters delete ${{ env.clusterName1 }} --zone ${{ env.zone
        }} --quiet --async

        gcloud container clusters delete ${{ env.clusterName2 }} --zone ${{ env.zone
        }} --quiet --async

        '
      shell: bash {0}
    - continue-on-error: true
      if: ${{ !success() }}
      name: Upload artifacts
      uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
      with:
        name: cilium-sysdump-out.zip
        path: 'cilium-sysdump-context1.zip

          cilium-sysdump-context2.zip

          '
        retention-days: 5
    - continue-on-error: true
      if: ${{ success() }}
      name: Set commit status to success
      uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: ${{ github.workflow }}
        description: Connectivity test successful
        sha: ${{ steps.vars.outputs.sha }}
        state: success
        target_url: ${{ env.check_url }}
    - continue-on-error: true
      if: ${{ failure() }}
      name: Set commit status to failure
      uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: ${{ github.workflow }}
        description: Connectivity test failed
        sha: ${{ steps.vars.outputs.sha }}
        state: failure
        target_url: ${{ env.check_url }}
    - continue-on-error: true
      if: ${{ cancelled() }}
      name: Set commit status to cancelled
      uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: ${{ github.workflow }}
        description: Connectivity test cancelled
        sha: ${{ steps.vars.outputs.sha }}
        state: error
        target_url: ${{ env.check_url }}
    - continue-on-error: true
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: ${{ !success() && (github.event_name == 'schedule' || github.event_name
        == 'push') }}
      name: Send slack notification
      uses: 8398a7/action-slack@a74b761b4089b5d730d813fbedcd2ec5d394f3af
      with:
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        status: ${{ job.status }}
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid/appian/cilium.$(date
        +%s)
    timeout-minutes: 60
name: Multicluster / Cluster mesh (ci-multicluster)
'on':
  workflow_dispatch: {}
permissions:
  contents: read
  pull-requests: read
  statuses: write
